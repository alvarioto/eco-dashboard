{% set title = 'Dashboard de Consumo' %}
{% set filename = 'dashboard-consumo.html' %}
{% extends 'src/layouts/master.html' %}
{% block styles %}
<!-- Carga de Flatpickr CSS -->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">

<style>
    .page-content {
        padding: 20px;
        position: relative;
    }

    /* Estilos para el botón del modal en la esquina superior derecha */
    .modal-btn-container {
        display: flex;
        justify-content: flex-end;
        margin-bottom: 20px;
    }

    .modal-btn {
        background-color: #004e60;
        color: white;
        padding: 10px 15px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 12px;
        border: none;
    }

    /* Ajustes de las tarjetas */
    .card-group {
        display: flex;
        gap: 10px;
        justify-content: space-between;
        margin-bottom: 20px;
        flex-wrap: nowrap;
    }

    .card {
        flex: 1;
        padding: 8px;
        border-radius: 8px;
        background-color: #fff;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
        text-align: center;
        border: 1px solid #e0e0e0;
        font-size: 10px;  /* Reducir tamaño del texto */
        width: 130px;  /* Ancho fijo */
        height: 100px;  /* Altura ajustada */
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

    .card-info {
        font-size: 12px;  /* Ajustar tamaño del texto para que se vea bien */
        color: #004e60;
        font-weight: bold;
    }

    .card-extra {
        font-size: 10px;
        color: #6c757d;
        margin-top: 5px;
        white-space: nowrap;
    }

    /* Estilos para el gráfico */
    .chart-container {
        width: 50%;
        align-content: center;
        margin-bottom: 20px;
    }

    canvas {
        max-height: 300px;  /* Reducir altura del gráfico */
    }

    /* Estilos para la tabla */
    .table-container {
        margin-top: 20px;
    }

    table {
        width: 100%;
        border-collapse: collapse;
        background-color: #fff;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
        overflow: hidden;
    }

    table th, table td {
        padding: 12px;
        border-bottom: 1px solid #e0e0e0;
        text-align: left;
        font-size: 12px;
    }

    table th {
        background-color: #f5f5f5;
        font-weight: bold;
    }

    table tr:last-child td {
        border-bottom: none;
    }

    .label {
        background-color: #f9b56a;
        color: white;
        border-radius: 5px;
        padding: 2px 8px;
        font-size: 10px;
    }

    .label-electricidad {
        background-color: #f9b56a; /* Naranja */
        color: white;
        border-radius: 5px;
        padding: 2px 8px;
        font-size: 10px;
    }

    .label-combustion {
        background-color: #e74c3c; /* Rojo */
        color: white;
        border-radius: 5px;
        padding: 2px 8px;
        font-size: 10px;
    }   

    .label-recargaGas {
        background-color: #3498db; /* Azul */
        color: white;
        border-radius: 5px;
        padding: 2px 8px;
        font-size: 10px;
    }

    .label-residuos {
        background-color: #2ecc71; /* Verde */
        color: white;
        border-radius: 5px;
        padding: 2px 8px;
        font-size: 10px;
    }

    .label-energiaGenerada {
        background-color: #9b59b6; /* Morado */
        color: white;
        border-radius: 5px;
        padding: 2px 8px;
        font-size: 10px;
    }

    .label-agua {
        background-color: #1abc9c; /* Turquesa */
        color: white;
        border-radius: 5px;
        padding: 2px 8px;
        font-size: 10px;
    }

    .green-label {
        background-color: #6cd3bd;
    }

    /* Paginación */
    .pagination {
        display: flex;
        justify-content: flex-end;
        margin-top: 10px;
    }

    .pagination select {
        padding: 1px;
        border-radius: 5px;
        border: 1px solid #ccc;
    }

    /* Estilos del modal */
    .modal-overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .modal-content {
        background-color: rgb(241, 242, 245);
        padding: 20px;
        border-radius: 18px;
        width: 900px;       /* Ancho fijo */
        height: 750px;      /* Altura fija */
        max-width: 900px;   /* Asegura que no exceda este ancho */
        max-height: 900px;  /* Asegura que no exceda esta altura */
        position: relative;
        overflow-y: auto;   /* Scroll para el contenido que exceda el alto */
    }

    .modal-content h2 {
        margin-bottom: 20px;
        font-size: 18px;
        font-weight: bold;
    }

    .modal-content button {
        background-color: #004e60;
        color: white;
        padding: 10px 15px;
        border-radius: 5px;
        border: none;
        cursor: pointer;
        font-size: 12px;
    }

    .modal-close {
        position: absolute;
        top: 10px;
        right: 10px;
        font-size: 18px;
        cursor: pointer;
        color: #000;
    }

    .modal-visible {
        display: flex;
    }

    /* Estilos del formulario en el modal */
    .modal-form {
        display: flex;
        gap: 29px;
    }

    .form-left {
        flex: 1;
        text-align: center;
        border: 1px dashed #e0e0e0;
        padding: 20px;
        border-radius: 8px;
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        height: 630px;
    }

    .form-left input {
        display: none;
    }

    .form-left label {
        padding: 10px 20px;
        background-color: #f5f5f5;
        border-radius: 5px;
        cursor: pointer;
        font-size: 12px;
        border: 1px solid #ccc;
    }

    .form-right {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 15px;
        justify-content: flex-start;
    }

    .form-group {
        display: flex;
        flex-direction: column;
    }

    .form-group label {
        font-size: 14px !important;
        font-weight: normal !important;
        color: #495057 !important;
        margin-bottom: 5px;
    }

    .form-group select,
    .form-group input {
        padding: 8px;
        font-size: 12px;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .switch {
        display: flex;
        align-items: center;
        font-size: 12px;
        gap: 10px;
    }

    /* Modal de Resultado */
    #resultadoModalContent {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        justify-content: center;
        align-items: center;
        z-index: 1001;
    }

    #resultadoModalContent .modal-content {
        width: 40%;
        max-width: 500px;
    }

    /* Responsive */
    @media (max-width: 768px) {
        .modal-form {
            flex-direction: column;
        }
        .form-left, .form-right {
            width: 100%;
        }
        .modal-content {
            width: 90%;
        }
        #resultadoModalContent .modal-content {
            width: 80%;
        }
    }

    .delete-btn {
        background-color: #e74c3c;
        color: white;
        border: none;
        border-radius: 4px;
        padding: 6px 12px;
        cursor: pointer;
        font-size: 12px;
    }

    .delete-btn:hover {
        background-color: #c0392b;
    }

    /* CONTENEDORES Y ESTILOS ADICIONALES (inputs, selects, etc.) */
    .date-range {
        display: flex;
        flex-direction: column;
        gap: 5px;
        width: 100%;
    }

    .input-date-group {
        display: flex;
        align-items: center;
        border: 1px solid #ced4da;
        border-radius: 6px;
        padding: 10px 12px;
        background-color: white;
        width: 100%;
        height: 40px;
        font-size: 14px;
        transition: border-color 0.2s ease-in-out;
    }

    .input-date {
        border: none !important;
        outline: none;
        font-size: 16px;
        text-align: center;
        width: 100%;
        height: 100%;
    }

    .separator {
        margin: 0 10px;
        font-size: 16px;
        color: #6c757d;
    }

    .calendar-icon {
        background: transparent !important;
        border: none !important;
        cursor: pointer;
        font-size: 18px !important;
        color: #6c757d !important;
        padding: 5px;
        margin-left: 8px;
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .calendar-icon:hover {
        color: #007bff !important;
    }

    /* CONTENEDORES PARA "CANTIDAD TOTAL" Y "COSTE TOTAL" */
    .cantidad-total-container,
    .coste-total-container {
        display: flex;
        align-items: center;
        border: 1px solid #ced4da;
        border-radius: 6px;
        background-color: white;
        width: 100%;
        height: 40px;
        font-size: 14px;
        transition: border-color 0.2s ease-in-out;
        overflow: hidden;
        position: relative;
    }

    .cantidad-total-container input,
    .coste-total-container input {
        border: none;
        outline: none;
        font-size: 14px;
        color: #495057;
        background: transparent;
        padding-left: 12px;
        text-align: left;
    }

    .cantidad-total-container select,
    .coste-total-container select {
        border: none;
        outline: none;
        font-size: 14px;
        background: transparent;
        color: #495057;
        cursor: pointer;
    }
</style>

{% endblock %}
{% block content %}

<div class="landing-page" id="resultadoLanding" style="display:none;">
    <h1>Resultado del Cálculo de Huella de Carbono</h1>
    <p id="resultadoHuella"></p>
    <button onclick="cerrarLandingPage()">Volver al Dashboard</button>
</div>
<div class="page-content">
    <!-- Div para el botón del modal en la parte superior derecha -->
    <div class="modal-btn-container">
        <button class="modal-btn" id="openModalBtn">Añadir Consumo</button>
    </div>

    <!-- Card Group -->
    <div class="card-group">
        <div class="card">
            <div class="card-info">2 consumos</div>
        </div>
        <div class="card">
            <div class="card-info" id="totalCalculos">0 cálculos realizados</div>
            <div class="card-extra" id="tiempoSinCalculos">Sin cálculos aún</div>
        </div>
        
    </div>

    <!-- Gráfico de barras -->
    <div class="chart-container">
        <canvas id="consumoChart"></canvas>
    </div>

    <!-- Tabla de Consumos -->
    <div class="table-container">
        <table id="consumosTable">
            <thead>
                <tr>
                    <th>Tipo</th>
                    <th>Concepto</th>
                    <th>Edificio</th>
                    <th>Fecha de inicio</th>
                    <th>Fecha de fin</th>
                    <th>Consumo</th>
                    <th>Emisiones</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                <!-- Filas de ejemplo comentadas -->
                <!--
                <tr>
                    <td><span class="label">Electricidad</span></td>
                    <td>Iberdrola servicios energéticos SAU</td>
                    <td>La Lonja Tech</td>
                    <td>01/05/2024</td>
                    <td>01/06/2024</td>
                    <td>1 kWh</td>
                    <td><span class="label green-label">0 emisiones</span></td>
                </tr>
                <tr>
                    <td><span class="label">Electricidad</span></td>
                    <td>Integración europea de energía SAU</td>
                    <td>La Lonja Tech</td>
                    <td>01/03/2024</td>
                    <td>31/03/2024</td>
                    <td>371,55 kWh</td>
                    <td>96,23 kg CO₂e</td>
                </tr>
                -->
            </tbody>
        </table>
    </div>

    <!-- Paginación -->
    <div class="pagination">
        <label for="resultsPerPage"> 1 de  </label>
        <select id="resultsPerPage">
            <option value="15">15</option>
        </select>
        <label>  sobre 2 resultados </label>
    </div>

    <!-- Modal para añadir consumo -->
<div class="modal-overlay" id="modalOverlay">
    <div class="modal-content">
        <span class="modal-close" id="closeModalBtn">&times;</span>
        <h2>Añadir consumo</h2>
        <div class="modal-form">
            <!-- Parte izquierda: arrastrar archivo -->
            <div class="form-left">
                <input type="file" id="fileUpload">
                <label for="fileUpload">Elija un fichero o arrástrelo aquí</label>
                <p>IMAGE/PNG, IMAGE/GIF, IMAGE/JPEG, APPLICATION/PDF</p>
            </div>

            <!-- Parte derecha: formulario dinámico basado en el tipo -->
            <div class="form-right">
                <div class="form-group">
                    <label for="tipo">Tipo *</label>
                    <select id="tipo" name="tipo">
                        <option value="">-- Selecciona un tipo --</option>
                        <option value="electricidad">Electricidad ⚡</option>
                        <option value="combustible">Combustible</option>
                    </select>
                </div>

                <!-- Formulario para Electricidad -->

                <div class="formulario-consumo" id="formElectricidad" style="display:none;">
                    <div class="form-group">
                        <label for="edificioElectricidad">Edificio *</label>
                        <select id="edificioElectricidad">
                            <option>-- Selecciona un edificio --</option>
                            <option>Edificio A</option>
                            <option>Edificio B</option>
                            <!-- Añade más opciones según sea necesario -->
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="fechaInicio">Fecha de inicio y fin *</label>
                        <div class="date-range">
                            <div class="input-date-group">
                                <input type="text" id="fechaInicio" class="input-date" placeholder="dd/mm/aaaa">
                                <span class="separator">→</span>
                                <input type="text" id="fechaFin" class="input-date" placeholder="dd/mm/aaaa">
                                <button type="button" class="calendar-icon" id="openCalendar">📅</button>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="costeTotalElectricidad">Coste total</label>
                        <div class="coste-total-container">
                            <input type="number" id="costeTotalElectricidad" placeholder="--" step="0.01">
                            <select id="monedaElectricidad">
                                <option value="EUR">EUR (€)</option>
                                <option value="USD">USD ($)</option>
                                <option value="GBP">GBP (£)</option>
                                <option value="JPY">JPY (¥)</option>
                                <option value="CHF">CHF</option>
                                <option value="CAD">CAD</option>
                                <option value="AUD">AUD</option>
                                <option value="CNY">CNY</option>
                                <option value="INR">INR</option>
                                <!-- Añade más monedas si es necesario -->
                            </select>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="proveedorElectricidad">Proveedor *</label>
                        <select id="proveedorElectricidad">
                            <option>-- Selecciona un proveedor --</option>
                            <!-- Lista completa de proveedores -->
                            <option>ENERGY BY COGEN . (R2-337)</option>
                            <option>ENDESA ENERGÍA S.A.U.</option> 
                            <option>ENERGY PLUS IBERIA. (R2-984)</option>
                            <option>ENERGY STROM XXI SL (R2-479)</option>
                            <!-- Añade todas las opciones que necesites -->
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="origenElectricidad">Origen de la energía</label>
                        <select id="origenElectricidad">
                            <option>No renovable</option>
                            <option>Renovable</option>
                            <option>Congeneracion de alta Eficiencia</option>
                        </select>
                    </div>
                    <!-- <div class="form-group">
                        <label for="cantidadElectricidad">Cantidad *</label>
                        <input type="number" id="cantidadElectricidad" placeholder="Kilovatio hora (kWh)" step="0.01">
                    </div> -->
                    <div class="form-group">
                        <label for="cantidadElectricidad">Cantidad total</label>
                        <div class="cantidad-total-container">
                            <input type="number" id="cantidadElectricidad" placeholder="--" step="0.01">
                            <select id="unidadCantidadElectricidad">
                                <option value="Kilovatio hora (kWh)">Kilovatio hora (kWh) </option>
                                <option value="Megavatio hora (kWh)">Megavatio hora (kWh)</option>
            
                            </select>
                        </div>
                </div>
                <div class="formulario-consumo" id="formCombustible" style="display:none;">
                    <div class="form-group">
                        <label for="tipoCombustible">Tipo de Combustible *</label>
                        <select id="tipoCombustible">
                            <option value="">-- Selecciona un combustible --</option>
                            <option value="gasolina">Gasolina</option>
                            <option value="diesel">Diesel</option>
                            <!-- Otras opciones -->
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="edificioCombustible">Edificio *</label>
                        <select id="edificioCombustible">
                            <option value="">-- Selecciona un edificio --</option>
                            <option>Edificio A</option>
                            <option>Edificio B</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="fechaInicioCombustible">Fecha de inicio y fin *</label>
                        <div class="date-range">
                            <div class="input-date-group">
                                <input type="text" id="fechaInicioCombustible" class="input-date" placeholder="dd/mm/aaaa">
                                <span class="separator">→</span>
                                <input type="text" id="fechaFinCombustible" class="input-date" placeholder="dd/mm/aaaa">
                                <button type="button" class="calendar-icon" id="openCalendarCombustible">📅</button>
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="cantidadCombustible">Cantidad *</label>
                        <input type="number" id="cantidadCombustible" placeholder="Cantidad consumida" step="0.01">
                    </div>
                    <!-- Otros campos específicos que necesites -->
                    <button id="calcularBtn">Calcular y Añadir</button>
            </div>
        </div>
    </div>

    <!-- Modal para mostrar el resultado de la huella de carbono -->
    <div class="modal-overlay" id="resultadoModalContent">
        <div class="modal-content">
            <span class="modal-close" id="cerrarModalBtn">&times;</span>
            <h2>Resultado del Cálculo de Huella de Carbono</h2>
            <p id="resultadoHuellaModal"></p>
            <button id="verLandingBtn">Ver Inform Completo</button>
        </div>
    </div>
</div>
<!-- Script para generar el gráfico con Chart.js -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<!-- Cargar calculohuella.js -->
<script src="./calculohuella.js"></script>

<!-- Cargar PDF.js -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/2.12.313/pdf.min.js"></script>

<!-- No incluyas Tesseract.js vía CDN -->
<!-- <script src="https://cdn.jsdelivr.net/npm/tesseract.js@4.1.4/dist/tesseract.min.js"></script> -->

<!-- Cargar XLSX -->
<script src="https://cdn.jsdelivr.net/npm/xlsx/dist/xlsx.full.min.js"></script>

<!-- ES Modules: Importar fileParser.js desde la ruta correcta -->
<script type="module">
    import { inicializarFileUpload } from '../dist/assets/compiled/js/fileParser.js';

    document.addEventListener('DOMContentLoaded', () => {
        inicializarFileUpload('fileUpload');
    });
</script>

<!-- Cargar Flatpickr -->
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

<script>
    document.addEventListener("DOMContentLoaded", function() {
        // -------------------------------
        // Inicialización de Flatpickr
        // -------------------------------
        const fechaInicio = document.getElementById("fechaInicio");
        const fechaFin = document.getElementById("fechaFin");
        const openCalendarIcon = document.getElementById("openCalendar");

        // Configura Flatpickr para el rango de fechas en Electricidad
        const dateRangePicker = flatpickr(fechaInicio, {
            mode: "range",
            dateFormat: "d/m/Y",
            locale: "es",
            allowInput: true,
            onClose: function(selectedDates, dateStr, instance) {
                if (selectedDates.length === 2) {
                    fechaInicio.value = instance.formatDate(selectedDates[0], "d/m/Y");
                    fechaFin.value = instance.formatDate(selectedDates[1], "d/m/Y");
                }
            }
    });

    // Configura Flatpickr para el rango de fechas en Combustible (si existen los elementos)
    const fechaInicioCombustible = document.getElementById("fechaInicioCombustible");
    const fechaFinCombustible = document.getElementById("fechaFinCombustible");
    if (fechaInicioCombustible && fechaFinCombustible) {
        flatpickr(fechaInicioCombustible, {
            mode: "range",
            dateFormat: "d/m/Y",
            locale: flatpickr.l10ns.es,
            allowInput: true,
            onClose: function(selectedDates, dateStr, instance) {
                if (selectedDates.length === 2) {
                    fechaInicioCombustible.value = instance.formatDate(selectedDates[0], "d/m/Y");
                    fechaFinCombustible.value   = instance.formatDate(selectedDates[1], "d/m/Y");
                }
            }
        });
    }

    // Asocia el botón de calendario para abrir el selector
    if (openCalendarIcon) {
        openCalendarIcon.addEventListener("click", function() {
        dateRangePicker.open();
        });
    }

    // -------------------------------
    // Funcionalidad del Modal "Añadir Consumo"
    // -------------------------------
    // Elementos del modal para abrir/cerrar
    const openModalBtn = document.getElementById('openModalBtn');
    const closeModalBtn = document.getElementById('closeModalBtn');
    const modalOverlay = document.getElementById('modalOverlay');

    if (openModalBtn && modalOverlay) {
      openModalBtn.addEventListener('click', () => {
          modalOverlay.classList.add('modal-visible');
      });
    }
    if (closeModalBtn && modalOverlay) {
      closeModalBtn.addEventListener('click', () => {
          modalOverlay.classList.remove('modal-visible');
      });
    }
    window.addEventListener('click', (e) => {
        if (e.target === modalOverlay) {
            modalOverlay.classList.remove('modal-visible');
        }
    });

    // -------------------------------
    // Mostrar formulario dinámico según el tipo
    // -------------------------------
    const tipoSelect = document.getElementById("tipo");
    const formularios = {
        electricidad: document.getElementById("formElectricidad"),
        combustible: document.getElementById("formCombustible"),
        recargaGas: document.getElementById("formRecargaGas")
    };

    // Función que oculta todos los formularios y muestra el seleccionado
    window.mostrarFormulario = function () {
        Object.values(formularios).forEach(form => {
            if (form) form.style.display = "none";
        });

        const tipoSeleccionado = tipoSelect.value;
        console.log("Tipo seleccionado:", tipoSeleccionado);

        if (formularios[tipoSeleccionado]) {
            formularios[tipoSeleccionado].style.display = "block";
            console.log("Mostrando formulario:", formularios[tipoSeleccionado].id);
        } else {
            console.warn(`❌ No se encontró el formulario para: ${tipoSeleccionado}`);
        }
    };

    if (tipoSelect) {
        tipoSelect.addEventListener("change", window.mostrarFormulario);
    }

    // -------------------------------
    // Opcional: Configuración de formateo de fecha manual en inputs (si es necesario)
    // -------------------------------
    function setupDateInput(input) {
        input.addEventListener("input", function(e) {
            let value = e.target.value.replace(/\D/g, "");
            if (value.length > 8) value = value.slice(0, 8);
            let formattedValue = "";
            if (value.length > 2) {
                formattedValue = value.slice(0, 2) + "/";
                if (value.length > 4) {
                    formattedValue += value.slice(2, 4) + "/";
                    formattedValue += value.slice(4, 8);
                } else {
                    formattedValue += value.slice(2, 4);
                }
            } else {
                formattedValue = value;
            }
            e.target.value = formattedValue;
        });
    }
    // Llama a setupDateInput en los inputs que necesites (si es requerido)
});
</script>
<script>
    // Bloque de funciones y Chart.js
    let totalCalculos = 0; // Número total de cálculos realizados
    let ultimaFechaCalculo = null; // Fecha del último cálculo realizado

    // Inicializar el gráfico de consumo (ejemplo)
    const ctx = document.getElementById('consumoChart').getContext('2d');
    const consumoChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'],
            datasets: [{
                label: 'Consumo (kWh)',
                data: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                backgroundColor: '#f9b56a',
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });

    function actualizarGrafico() {
        const tableBody = document.getElementById('consumosTable').getElementsByTagName('tbody')[0];
        const filas = tableBody.getElementsByTagName('tr');
        const dataPorMes = Array(12).fill(0); // Inicializa un array con 12 meses

        for (const fila of filas) {
            const fechaInicio = fila.cells[3].textContent; // Fecha de inicio
            const consumoTexto = fila.cells[5].textContent; // Ej: "123 kWh"
            const consumo = parseFloat(consumoTexto.split(' ')[0]); // Extrae el número

            if (fechaInicio && !isNaN(consumo)) {
                const mes = new Date(fechaInicio).getMonth(); // Obtén el mes (0 = enero)
                dataPorMes[mes] += consumo; // Suma el consumo al mes correspondiente
            }
        }

        // Actualiza el gráfico
        consumoChart.data.datasets[0].data = dataPorMes;
        consumoChart.update(); // Refresca el gráfico
    }

    // -------------------------------
    // Funciones para manejo del modal de resultado y landing page
    // -------------------------------
    function cerrarModalResultado() {
        document.getElementById('resultadoModalContent').style.display = 'none';
    }

    function mostrarResultadoEnModal(mensaje) {
        const resultadoHuellaModal = document.getElementById('resultadoHuellaModal');
        resultadoHuellaModal.textContent = mensaje;
        document.getElementById('resultadoModalContent').style.display = 'flex';
    }

    const cerrarModalBtn = document.getElementById('cerrarModalBtn');
    if (cerrarModalBtn) {
        cerrarModalBtn.addEventListener('click', cerrarModalResultado);
    }

    document.getElementById('verLandingBtn').addEventListener('click', function() {
        const resultadoMensaje = document.getElementById('resultadoHuellaModal').textContent;
        abrirLandingPage(resultadoMensaje);
    });

    function abrirLandingPage(mensaje) {
        const newWindow = window.open("", "_blank");
        newWindow.document.write(`
            <html>
                <head>
                    <title>Resultado del Cálculo de Huella de Carbono</title>
                    <style>
                        body {
                            font-family: Arial, sans-serif;
                            display: flex;
                            justify-content: center;
                            align-items: center;
                            height: 100vh;
                            margin: 0;
                            background-color: #f0f0f0;
                        }
                        .result-container {
                            background-color: #fff;
                            padding: 20px;
                            border-radius: 8px;
                            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
                            text-align: center;
                        }
                        h1 {
                            color: #004e60;
                        }
                        button {
                            background-color: #004e60;
                            color: white;
                            padding: 10px 15px;
                            border-radius: 5px;
                            border: none;
                            cursor: pointer;
                            font-size: 16px;
                            margin-top: 20px;
                        }
                    </style>
                </head>
                <body>
                    <div class="result-container">
                        <h1>Resultado del Cálculo de Huella de Carbono</h1>
                        <p>${mensaje}</p>
                        <button onclick="window.close()">Cerrar</button>
                    </div>
                </body>
            </html>
        `);
    }

    function actualizarTarjetas() {
        const totalCalculosDiv = document.getElementById('totalCalculos');
        const tiempoSinCalculosDiv = document.getElementById('tiempoSinCalculos');

        totalCalculosDiv.textContent = `${totalCalculos} cálculos realizados`;

        if (ultimaFechaCalculo) {
            const ahora = new Date();
            const tiempoTranscurrido = Math.floor((ahora - ultimaFechaCalculo) / (1000 * 60 * 60 * 24));
            let textoTiempo;

            if (tiempoTranscurrido === 0) {
                textoTiempo = 'Hoy';
            } else if (tiempoTranscurrido === 1) {
                textoTiempo = '1 día sin cálculos';
            } else if (tiempoTranscurrido < 30) {
                textoTiempo = `${tiempoTranscurrido} días sin cálculos`;
            } else if (tiempoTranscurrido < 365) {
                const meses = Math.floor(tiempoTranscurrido / 30);
                textoTiempo = `${meses} ${meses === 1 ? 'mes' : 'meses'} sin cálculos`;
            } else {
                const años = Math.floor(tiempoTranscurrido / 365);
                textoTiempo = `${años} ${años === 1 ? 'año' : 'años'} sin cálculos`;
            }

            tiempoSinCalculosDiv.textContent = textoTiempo;
        } else {
            tiempoSinCalculosDiv.textContent = 'Sin cálculos aún';
        }
    }

    function limpiarFormulario(type) {
        const formulariosCampos = {
            electricidad: ['proveedorElectricidad', 'edificioElectricidad', 'fechaInicioElectricidad', 'fechaFinElectricidad', 'cantidadElectricidad'],
            combustible: ['tipoCombustible', 'edificioCombustible', 'fechaInicioCombustible', 'fechaFinCombustible', 'cantidadCombustible'],
            recargaGas: ['gasRecargaGas', 'edificioRecargaGas', 'fechaInicioRecargaGas', 'fechaFinRecargaGas', 'cantidadRecargaGas'],
        };

        if (formulariosCampos[type]) {
            formulariosCampos[type].forEach(id => {
                const element = document.getElementById(id);
                if (element) {
                    element.value = '';
                }
            });
        }

        document.getElementById('tipo').value = '';
        mostrarFormulario();
    }

    document.getElementById('calcularBtn').addEventListener('click', function() {
        const type = document.getElementById('tipo').value;
        let concept = '';
        let building = '';
        let start_date = '';
        let end_date = '';
        let numericConsumption = 0;
        let numericEmissions = 0;
        let consumptionText = '';
        let emissionsText = '';

        if (type === 'electricidad') {
            concept = document.getElementById('proveedorElectricidad').value;
            building = document.getElementById('edificioElectricidad').value;
            start_date = document.getElementById('fechaInicioElectricidad').value;
            end_date = document.getElementById('fechaFinElectricidad').value;
            const consumoValue = parseFloat(document.getElementById('cantidadElectricidad').value);

            if (!start_date || !end_date || isNaN(consumoValue) || consumoValue < 0) {
                alert('Por favor, completa correctamente todos los campos.');
                return;
            }

            const huellaCarbono = calcularHuellaAlcance2(concept, consumoValue);
            if (huellaCarbono === null) {
                alert('Comercializadora no encontrada en los factores de emisión.');
                return;
            }

            numericEmissions = huellaCarbono.toFixed(2);
            numericConsumption = consumoValue;
            emissionsText = numericEmissions + ' kg CO₂e';
            consumptionText = numericConsumption + ' kWh';

        } else if (type === 'combustible') {
            // Para el nuevo tipo "combustible"
            concept = document.getElementById('tipoCombustible').value;
            building = document.getElementById('edificioCombustible').value;
            start_date = document.getElementById('fechaInicioCombustible').value;
            end_date = document.getElementById('fechaFinCombustible').value;
            const cantidad = parseFloat(document.getElementById('cantidadCombustible').value);

            if (!concept || !start_date || !end_date || isNaN(cantidad) || cantidad < 0) {
                alert('Por favor, completa correctamente todos los campos.');
                return;
            }

            const huellaCarbono = calcularHuellaCombustible(concept, cantidad);
            if (huellaCarbono === null) {
                alert('Combustible no encontrado en los factores de emisión.');
                return;
            }

            numericEmissions = huellaCarbono.toFixed(2);
            numericConsumption = cantidad;
            emissionsText = numericEmissions + ' kg CO₂e';
            consumptionText = numericConsumption + ' L';

        } else if (type === 'recargaGas') {
            concept = document.getElementById('gasRecargaGas').value;
            building = document.getElementById('edificioRecargaGas').value;
            start_date = document.getElementById('fechaInicioRecargaGas').value;
            end_date = document.getElementById('fechaFinRecargaGas').value;
            const cantidad = parseFloat(document.getElementById('cantidadRecargaGas').value);

            if (!concept || !start_date || !end_date || isNaN(cantidad) || cantidad < 0) {
                alert('Por favor, completa correctamente todos los campos.');
                return;
            }

            const huellaCarbono = calcularHuellaRecargaGas(concept, cantidad);
            if (huellaCarbono === null) {
                alert('Gas no encontrado en los factores de emisión.');
                return;
            }

            numericEmissions = huellaCarbono.toFixed(2);
            numericConsumption = cantidad;
            emissionsText = numericEmissions + ' kg CO₂e';
            consumptionText = numericConsumption + ' kg';

        } else {
            alert('Tipo no soportado para el cálculo de huella de carbono.');
            return;
        }

        fetch('http://localhost:3000/api/save-calculation', {
            method: 'POST',
            credentials: 'include',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                type,
                concept,
                building,
                start_date,
                end_date,
                consumption: numericConsumption,
                emissions: numericEmissions,
            }),
        })
        .then((response) => response.json())
        .then((data) => {
            if (data.success) {
                const realId = data.newId;
                const tableBody = document.getElementById('consumosTable').getElementsByTagName('tbody')[0];
                const newRow = tableBody.insertRow();

                const cellTipo = newRow.insertCell(0);
                cellTipo.innerHTML = `<span class="label label-${type}">${type.charAt(0).toUpperCase() + type.slice(1)}</span>`;

                const cellConcepto = newRow.insertCell(1);
                cellConcepto.textContent = concept;

                const cellEdificio = newRow.insertCell(2);
                cellEdificio.textContent = building;

                const cellFechaInicio = newRow.insertCell(3);
                cellFechaInicio.textContent = start_date;

                const cellFechaFin = newRow.insertCell(4);
                cellFechaFin.textContent = end_date;

                const cellConsumo = newRow.insertCell(5);
                cellConsumo.textContent = consumptionText;

                const cellEmisiones = newRow.insertCell(6);
                cellEmisiones.textContent = emissionsText;

                const cellAcciones = newRow.insertCell(7);
                cellAcciones.innerHTML = `<button class="delete-btn" data-id="${realId}">Eliminar</button>`;
                
                const deleteBtn = cellAcciones.querySelector('.delete-btn');
                deleteBtn.addEventListener('click', onDeleteClick);

                alert('Cálculo guardado exitosamente.');
                actualizarGrafico();
                mostrarResultadoEnModal(`La huella de carbono para el Alcance ${type === 'electricidad' ? '2' : '1'} es: ${emissionsText}`);
                modalOverlay.classList.remove('modal-visible');
                limpiarFormulario(type);
                totalCalculos++;
                ultimaFechaCalculo = new Date();
                actualizarTarjetas();
            } else {
                alert(`Error al guardar el cálculo: ${data.error}`);
            }
        })
        .catch((error) => {
            console.error('Error al enviar los datos al servidor:', error);
        });
    });

    document.addEventListener('DOMContentLoaded', function () {
        fetch('http://localhost:3000/api/get-user-calculations', {
            credentials: 'include'
        })
        .then((response) => response.json())
        .then((data) => {
            if (data.success) {
                poblarTabla(data.calculations);
                actualizarGrafico(data.calculations);
            } else {
                alert('Error al cargar los cálculos: ' + data.error);
            }
        })
        .catch((error) => {
            console.error('Error al obtener cálculos:', error);
        });
    });

    function poblarTabla(calculations) {
        const tableBody = document.getElementById('consumosTable').getElementsByTagName('tbody')[0];
        tableBody.innerHTML = '';

        calculations.forEach((calculation) => {
            const newRow = tableBody.insertRow();

            const cellTipo = newRow.insertCell(0);
            cellTipo.innerHTML = `<span class="label label-${calculation.type}">${calculation.type.charAt(0).toUpperCase() + calculation.type.slice(1)}</span>`;
            const cellConcepto = newRow.insertCell(1);
            cellConcepto.textContent = calculation.concept;
            const cellEdificio = newRow.insertCell(2);
            cellEdificio.textContent = calculation.building;
            const cellFechaInicio = newRow.insertCell(3);
            cellFechaInicio.textContent = calculation.start_date;
            const cellFechaFin = newRow.insertCell(4);
            cellFechaFin.textContent = calculation.end_date;
            const cellConsumo = newRow.insertCell(5);
            cellConsumo.textContent = calculation.consumption;
            const cellEmisiones = newRow.insertCell(6);
            cellEmisiones.textContent = calculation.emissions;

            const cellAcciones = newRow.insertCell(7);
            cellAcciones.innerHTML = `<button class="delete-btn" data-id="${calculation.id}">Eliminar</button>`;

            const deleteBtn = cellAcciones.querySelector('.delete-btn');
            deleteBtn.addEventListener('click', onDeleteClick);
        });
    }

    function onDeleteClick(event) {
        const btn = event.currentTarget;
        const calcId = btn.getAttribute('data-id');

        const confirmar = confirm('¿Seguro que deseas eliminar este cálculo?');
        if (!confirmar) return;

        fetch('http://localhost:3000/api/delete-calculation/' + calcId, {
            method: 'DELETE',
            credentials: 'include'
        })
        .then((response) => response.json())
        .then((data) => {
            if (data.success) {
                btn.closest('tr').remove();
                alert('Cálculo eliminado correctamente.');
                actualizarGrafico();
            } else {
                alert('Error al eliminar: ' + data.error);
            }
        })
        .catch((error) => {
            console.error('Error al eliminar:', error);
        });
    }

    function actualizarGrafico(calculations) {
        if (!calculations) {
            const tableBody = document.getElementById('consumosTable').getElementsByTagName('tbody')[0];
            const filas = tableBody.getElementsByTagName('tr');
            const dataPorMes = Array(12).fill(0);

            for (const fila of filas) {
                const fechaInicio = fila.cells[3].textContent;
                const consumoTexto = fila.cells[5].textContent;
                const consumo = parseFloat(consumoTexto.split(' ')[0]);

                if (fechaInicio && !isNaN(consumo)) {
                    const mes = new Date(fechaInicio).getMonth();
                    dataPorMes[mes] += consumo;
                }
            }
            consumoChart.data.datasets[0].data = dataPorMes;
        } else {
            const dataPorMes = Array(12).fill(0);
            calculations.forEach((calculation) => {
                const fechaInicio = calculation.start_date;
                const consumo = parseFloat(calculation.consumption);

                if (fechaInicio && !isNaN(consumo)) {
                    const mes = new Date(fechaInicio).getMonth();
                    dataPorMes[mes] += consumo;
                }
            });
            consumoChart.data.datasets[0].data = dataPorMes;
        }
        consumoChart.update();
    }

    document.addEventListener("DOMContentLoaded", function() {
        function setupDateInput(input) {
            input.addEventListener("input", function(e) {
                let value = e.target.value.replace(/\D/g, "");
                if (value.length > 8) value = value.slice(0, 8);

                let formattedValue = "";
                if (value.length > 2) {
                    formattedValue = value.slice(0, 2) + "/";
                    if (value.length > 4) {
                        formattedValue += value.slice(2, 4) + "/";
                        formattedValue += value.slice(4, 8);
                    } else {
                        formattedValue += value.slice(2, 4);
                    }
                } else {
                    formattedValue = value;
                }
                e.target.value = formattedValue;
            });
        }
    });
</script>

{% endblock %}